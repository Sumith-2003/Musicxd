// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Musicxd.Infrastructure.Data;

#nullable disable

namespace Musicxd.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250822114143_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlbumArtist", b =>
                {
                    b.Property<int>("AlbumsAlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("ArtistsArtistId")
                        .HasColumnType("int");

                    b.HasKey("AlbumsAlbumId", "ArtistsArtistId");

                    b.HasIndex("ArtistsArtistId");

                    b.ToTable("AlbumArtist");
                });

            modelBuilder.Entity("AlbumFavouriteAlbumList", b =>
                {
                    b.Property<int>("AlbumsAlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("FavouriteAlbumListsFavouriteAlbumListId")
                        .HasColumnType("integer");

                    b.HasKey("AlbumsAlbumId", "FavouriteAlbumListsFavouriteAlbumListId");

                    b.HasIndex("FavouriteAlbumListsFavouriteAlbumListId");

                    b.ToTable("AlbumFavouriteAlbumList");
                });

            modelBuilder.Entity("AlbumGenre", b =>
                {
                    b.Property<int>("AlbumsAlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresGenreId")
                        .HasColumnType("integer");

                    b.HasKey("AlbumsAlbumId", "GenresGenreId");

                    b.HasIndex("GenresGenreId");

                    b.ToTable("AlbumGenre");
                });

            modelBuilder.Entity("AlbumList", b =>
                {
                    b.Property<int>("AlbumsAlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("ListsListId")
                        .HasColumnType("int");

                    b.HasKey("AlbumsAlbumId", "ListsListId");

                    b.HasIndex("ListsListId");

                    b.ToTable("AlbumList");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("album_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlbumId"));

                    b.Property<string>("AlbumDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("album_description");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("album_name");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country_name");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time")
                        .HasColumnName("duration");

                    b.Property<int?>("ReleaseDateId")
                        .HasColumnType("integer")
                        .HasColumnName("release_date_id");

                    b.Property<int>("StudioId")
                        .HasColumnType("integer")
                        .HasColumnName("studio_id");

                    b.HasKey("AlbumId");

                    b.HasIndex("ReleaseDateId");

                    b.HasIndex("StudioId");

                    b.ToTable("album", (string)null);
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("artist_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtistId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("ArtistId");

                    b.ToTable("artist", (string)null);
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment_content");

                    b.Property<int>("CreatedDateId")
                        .HasColumnType("integer")
                        .HasColumnName("created_date_id");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int>("ReviewId")
                        .HasColumnType("integer")
                        .HasColumnName("review_id");

                    b.HasKey("CommentId");

                    b.HasIndex("CreatedDateId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ReviewId");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Date", b =>
                {
                    b.Property<int>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("date_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DateId"));

                    b.Property<DateTime>("DateValue")
                        .HasColumnType("date")
                        .HasColumnName("date_value");

                    b.Property<int>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<int>("Decade")
                        .HasColumnType("integer")
                        .HasColumnName("decade");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("DateId");

                    b.ToTable("date", (string)null);
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.FavouriteAlbumList", b =>
                {
                    b.Property<int>("FavouriteAlbumListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("favourite_album_list_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavouriteAlbumListId"));

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.HasKey("FavouriteAlbumListId");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("favourite_album_list", (string)null);
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genre_name");

                    b.HasKey("GenreId");

                    b.ToTable("genre", (string)null);
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("like_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    b.Property<int>("profile_id")
                        .HasColumnType("int");

                    b.Property<int>("review_id")
                        .HasColumnType("int");

                    b.HasKey("LikeId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("profile_id");

                    b.ToTable("like", null, t =>
                        {
                            t.Property("profile_id")
                                .HasColumnName("profile_id1");

                            t.Property("review_id")
                                .HasColumnName("review_id1");
                        });
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.List", b =>
                {
                    b.Property<int>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("list_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListId"));

                    b.Property<int>("CreatedDateId")
                        .HasColumnType("integer")
                        .HasColumnName("created_date_id");

                    b.Property<int?>("DateId")
                        .HasColumnType("integer");

                    b.Property<int?>("DateId1")
                        .HasColumnType("integer");

                    b.Property<string>("ListDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("list_description");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("list_name");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int?>("UpdatedDateId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_date_id");

                    b.HasKey("ListId");

                    b.HasIndex("CreatedDateId");

                    b.HasIndex("DateId");

                    b.HasIndex("DateId1");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UpdatedDateId");

                    b.ToTable("list", (string)null);
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("bio");

                    b.Property<int>("DateJoinedId")
                        .HasColumnType("int")
                        .HasColumnName("date_joined_id");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("location");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("website");

                    b.HasKey("ProfileId");

                    b.HasIndex("DateJoinedId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("profile", (string)null);
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer")
                        .HasColumnName("album_id");

                    b.Property<int>("CreatedDateId")
                        .HasColumnType("integer")
                        .HasColumnName("created_date_id");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int?>("ProfileId1")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("ReviewDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("review_description");

                    b.Property<int?>("UpdatedDateId")
                        .HasColumnType("integer");

                    b.HasKey("ReviewId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatedDateId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProfileId1");

                    b.HasIndex("UpdatedDateId");

                    b.ToTable("review", (string)null);
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Studio", b =>
                {
                    b.Property<int>("StudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("studio_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudioId"));

                    b.Property<string>("StudioName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("studio_name");

                    b.HasKey("StudioId");

                    b.ToTable("studio", (string)null);
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("password");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("AlbumArtist", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlbumFavouriteAlbumList", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.FavouriteAlbumList", null)
                        .WithMany()
                        .HasForeignKey("FavouriteAlbumListsFavouriteAlbumListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlbumGenre", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlbumList", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.List", null)
                        .WithMany()
                        .HasForeignKey("ListsListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Album", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Date", "ReleaseDate")
                        .WithMany("Albums")
                        .HasForeignKey("ReleaseDateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Musicxd.Domain.Entities.Studio", "Studio")
                        .WithMany("Albums")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReleaseDate");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Date", "CreatedDate")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedDateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.Profile", "Profile")
                        .WithMany("Comments")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedDate");

                    b.Navigation("Profile");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.FavouriteAlbumList", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Profile", "Profile")
                        .WithOne("FavouriteAlbumList")
                        .HasForeignKey("Musicxd.Domain.Entities.FavouriteAlbumList", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Like", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Review", "Review")
                        .WithMany("Likes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.Profile", "Profile")
                        .WithMany("Likes")
                        .HasForeignKey("profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.List", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Date", "CreatedDate")
                        .WithMany()
                        .HasForeignKey("CreatedDateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.Date", null)
                        .WithMany("ListsCreated")
                        .HasForeignKey("DateId");

                    b.HasOne("Musicxd.Domain.Entities.Date", null)
                        .WithMany("ListsUpdated")
                        .HasForeignKey("DateId1");

                    b.HasOne("Musicxd.Domain.Entities.Profile", "Profile")
                        .WithMany("Lists")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.Date", "UpdatedDate")
                        .WithMany()
                        .HasForeignKey("UpdatedDateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedDate");

                    b.Navigation("Profile");

                    b.Navigation("UpdatedDate");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Profile", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Date", "DateJoined")
                        .WithMany("ProfilesJoined")
                        .HasForeignKey("DateJoinedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Musicxd.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateJoined");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Review", b =>
                {
                    b.HasOne("Musicxd.Domain.Entities.Album", "Album")
                        .WithMany("Reviews")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.Date", "CreatedDate")
                        .WithMany("ReviewsCreated")
                        .HasForeignKey("CreatedDateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musicxd.Domain.Entities.Profile", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProfileId1");

                    b.HasOne("Musicxd.Domain.Entities.Date", "UpdatedDate")
                        .WithMany("ReviewsUpdated")
                        .HasForeignKey("UpdatedDateId");

                    b.Navigation("Album");

                    b.Navigation("CreatedDate");

                    b.Navigation("Profile");

                    b.Navigation("UpdatedDate");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Album", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Date", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Comments");

                    b.Navigation("ListsCreated");

                    b.Navigation("ListsUpdated");

                    b.Navigation("ProfilesJoined");

                    b.Navigation("ReviewsCreated");

                    b.Navigation("ReviewsUpdated");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Profile", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavouriteAlbumList")
                        .IsRequired();

                    b.Navigation("Likes");

                    b.Navigation("Lists");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Review", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.Studio", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Musicxd.Domain.Entities.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
